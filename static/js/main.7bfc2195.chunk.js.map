{"version":3,"sources":["components/CellGrid.js","components/TopGrid.js","components/Numbers.js","components/Info.js","components/Generator.js","components/Utils.js","App.js","serviceWorker.js","index.js"],"names":["CellGrid","props","state","draghover","allowDrop","bind","onDragEnter","onDrop","addDragOverClass","rows","_","range","map","dx","row","cols","dy","col","key","className","getFontClass","onDragOver","ev","board","onDragLeave","onDoubleClick","removeNumber","this","isGameFinished","isLast","isLastIncorrect","isHint","isAdded","hintMode","find","hintStack","i","j","added","isEqual","lastCoords","event","value","parseInt","dataTransfer","getData","onNewNumberDrop","cell","preventDefault","Component","TopGrid","dragEnterCell","dragLeaveCell","length","setState","Numbers","onDragStart","nums","vertical","num","draggable","setData","Info","wrapper","React","createRef","Modal","ref","centered","show","onHide","onInfoHide","Header","closeButton","Title","Body","Generator","_generate","shuffleCols","shuffleRows","shuffle","newBoard","slice","push","forEach","k","puzzles","data","random","getRowNums","x","filter","cloneDeep","getColNums","y","colNums","getBoxNums","cornerIdx","includes","l","hasDuplicate","array","eq","n","findIndex","findLastIndex","App","stack","showInfo","generator","getLastCoords","newPuzzle","toggleInfo","toggleHintMode","reset","gameAreaRef","finished","Fragment","renderTopControls","renderSideControls","renderWellDone","renderBottomControls","Form","Check","type","id","label","checked","onChange","Button","variant","size","onClick","target","now","newStack","concat","newHintStack","generate","resetBoard","last","coord","rowNums","boxNums","isIncorrect","uniq","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7bfc2195.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport \"./CellGrid.css\";\n\nclass CellGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      draghover: [-1, -1],\n    };\n\n    this.allowDrop = this.allowDrop.bind(this);\n    this.onDragEnter = this.onDragEnter.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.addDragOverClass = this.addDragOverClass.bind(this);\n  }\n  render() {\n    let rows = _.range(3).map((dx) => this.props.row * 3 + dx);\n    let cols = _.range(3).map((dy) => this.props.col * 3 + dy);\n    let key = 0;\n    return (\n      <div className=\"cell-container\">\n        {rows.map((row) => {\n          return cols.map((col) => (\n            <div\n              key={key++}\n              className={\n                \"cell \" +\n                this.getFontClass(row, col) +\n                (this.addDragOverClass(row, col) ? \" draghover\" : \"\")\n              }\n              onDragOver={(ev) =>\n                this.allowDrop(ev, this.props.board[row][col])\n              }\n              onDragEnter={(ev) => this.onDragEnter(ev, row, col)}\n              onDragLeave={(ev) => this.onDragLeave(ev, row, col)}\n              onDrop={(ev) => this.onDrop(ev, row, col)}\n            >\n              {this.props.board[row][col] > 0 ? (\n                <h2 onDoubleClick={() => this.props.removeNumber(row, col)}>\n                  {this.props.board[row][col]}\n                </h2>\n              ) : (\n                <h2>0</h2>\n              )}\n            </div>\n          ));\n        })}\n      </div>\n    );\n  }\n\n  getFontClass(row, col) {\n    if (this.props.isGameFinished) {\n      return \" finished \";\n    }\n    if (this.props.board[row][col] === 0) {\n      return \" hidden \";\n    }\n    if (this.isLast(row, col)) {\n      return this.props.isLastIncorrect ? \"incorrect\" : \"latest\";\n    }\n    if (this.isHint(row, col)) {\n      return \" text-primary \";\n    }\n    if (this.isAdded(row, col)) {\n      return \"correct\";\n    }\n    return \"\";\n  }\n\n  isHint(row, col) {\n    if (!this.props.hintMode) {\n      return false;\n    }\n    return _.find(this.props.hintStack, ([i, j]) => {\n      return i === row && j === col;\n    });\n  }\n\n  isAdded(row, col) {\n    return _.find(this.props.added, ([i, j]) => {\n      return i === row && j === col;\n    });\n  }\n\n  isLast(row, col) {\n    return _.isEqual([row, col], this.props.lastCoords);\n  }\n\n  addDragOverClass(row, col) {\n    // console.log(\"drag over class\", this.props.draghover, row, col);\n    return _.isEqual(this.props.draghover, [row, col]);\n  }\n\n  onDragEnter(event, row, col) {\n    if (this.props.board[row][col] > 0) {\n      this.props.onDragEnter(-1, -1);\n      return;\n    }\n    this.props.onDragEnter(row, col);\n  }\n\n  onDragLeave(event, row, col) {\n    this.props.onDragLeave(row, col);\n  }\n\n  onDrop(event, row, col) {\n    var value = parseInt(event.dataTransfer.getData(\"number\"));\n    this.props.onDragEnter(-1, -1);\n    this.props.onNewNumberDrop(row, col, value);\n  }\n\n  allowDrop(event, cell) {\n    if (cell === 0) {\n      event.preventDefault();\n    }\n  }\n}\n\nexport default CellGrid;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport CellGrid from \"./CellGrid\";\nimport \"./TopGrid.css\";\n\nclass TopGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      draghover: [-1, -1],\n    };\n\n    this.dragEnterCell = this.dragEnterCell.bind(this);\n    this.dragLeaveCell = this.dragLeaveCell.bind(this);\n  }\n  render() {\n    if (this.props.board.length < 9) {\n      return <div>Loading..</div>;\n    }\n    let rows = _.range(3);\n    let cols = _.range(3);\n    let key = 0;\n    return (\n      <div className=\"top-grid\">\n        {rows.map((row) => {\n          return (\n            <div key={key++} className=\"top-grid-row\">\n              {cols.map((col) => (\n                <CellGrid\n                  key={key++}\n                  board={this.props.board}\n                  row={row}\n                  col={col}\n                  removeNumber={this.props.removeNumber}\n                  onNewNumberDrop={this.props.onNewNumberDrop}\n                  hintMode={this.props.hintMode}\n                  hintStack={this.props.hintStack}\n                  lastCoords={this.props.lastCoords}\n                  isLastIncorrect={this.props.isLastIncorrect}\n                  isGameFinished={this.props.isGameFinished}\n                  added={this.props.added}\n                  draghover={this.state.draghover}\n                  onDragEnter={this.dragEnterCell}\n                  onDragLeave={this.dragLeaveCell}\n                />\n              ))}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  dragEnterCell(i, j) {\n    this.setState({\n      draghover: [i, j],\n    });\n  }\n\n  dragLeaveCell(i, j) {\n    // console.log(\"top grid leave \", i, j);\n    if (_.isEqual([i, j], this.state.draghover)) {\n      this.setState({\n        draghover: [-1, -1],\n      });\n    }\n  }\n}\n\nexport default TopGrid;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport \"./Numbers.css\";\n\nclass Numbers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.onDragStart.bind(this);\n  }\n\n  render() {\n    let nums = _.range(1, 10);\n    return (\n      <div\n        className={\n          (this.props.vertical ? \"vertical\" : \"horizontal\") +\n          (this.props.hintMode ? \" text-primary\" : \"\")\n        }\n      >\n        {nums.map((num) => {\n          return (\n            <h3\n              key={num}\n              className=\"number\"\n              draggable\n              onDragStart={(event) => this.onDragStart(event, num)}\n            >\n              {num}\n            </h3>\n          );\n        })}\n      </div>\n    );\n  }\n\n  onDragStart(event, num) {\n    event.dataTransfer.setData(\"number\", num);\n  }\n}\n\nexport default Numbers;\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nclass Info extends Component {\n  constructor(props) {\n    super(props);\n    this.wrapper = React.createRef();\n  }\n  render() {\n    return (\n      <Modal\n        ref={this.wrapper}\n        centered={true}\n        show={this.props.show}\n        onHide={this.props.onInfoHide}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <div className=\"custom-header\">\n              <span>Instructions</span>\n            </div>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ol>\n            <li>Drag and drop numbers on the grid</li>\n            <li>\n              Latest dropped number is colored Green for correct or Red for\n              incorrect placement\n            </li>\n            <li>Double click on any dropped numbers to empty that cell</li>\n            <li>\n              You can use <i>Reset</i> button at any time to reset puzzle to\n              initial state\n            </li>\n            <li>\n              You may use <i>Hint mode</i> to drop hints based on your guesses\n            </li>\n          </ol>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport default Info;\n","import _ from \"lodash\";\nimport data from \"../generator/puzzles.json\";\n\n// const SIZE = 9;\n\n// Grabbed from https://en.wikipedia.org/wiki/Sudoku\n// const SAMPLE = [\n//   [5, 3, 0, 0, 7, 0, 0, 0, 0],\n//   [6, 0, 0, 1, 9, 5, 0, 0, 0],\n//   [0, 9, 8, 0, 0, 0, 0, 6, 0],\n//   [8, 0, 0, 0, 6, 0, 0, 0, 3],\n//   [4, 0, 0, 8, 0, 3, 0, 0, 1],\n//   [7, 0, 0, 0, 2, 0, 0, 0, 6],\n//   [0, 6, 0, 0, 0, 0, 2, 8, 0],\n//   [0, 0, 0, 4, 1, 9, 0, 0, 5],\n//   [0, 0, 0, 0, 8, 0, 0, 7, 9],\n// ];\n\nexport default class Generator {\n  generate() {\n    let board = this._generate();\n    board = this.shuffleCols(board);\n    board = this.shuffleRows(board);\n    return board;\n  }\n\n  shuffleRows(board) {\n    let rows = _.shuffle(_.range(3));\n    let newBoard = [];\n    for (let i of rows) {\n      let row = _.slice(board, i * 3, i * 3 + 3);\n      newBoard.push(...row);\n    }\n    return newBoard;\n  }\n\n  shuffleCols(board) {\n    let cols = _.shuffle(_.range(3));\n    let newBoard = _.range(9).map(() => []);\n    for (let i of cols) {\n      _.range(3).forEach((j) => {\n        _.range(9).forEach((k) => {\n          newBoard[k].push(board[k][i * 3 + j]);\n        });\n      });\n    }\n    return newBoard;\n  }\n\n  _generate() {\n    // TODO actually write my own algorithm\n    let puzzles = data[\"puzzles\"];\n    let pi = _.random(0, puzzles.length - 1);\n    return puzzles[pi];\n  }\n}\n\n// const TEST = [\n//   [0, 1, 2, 4, 6, 9, 8, 5, 3],\n//   [9, 8, 6, 1, 3, 5, 2, 4, 7],\n//   [3, 4, 5, 2, 7, 8, 1, 9, 6],\n//   [0, 9, 1, 3, 5, 7, 6, 8, 4],\n//   [5, 6, 7, 8, 4, 1, 3, 2, 9],\n//   [4, 0, 8, 6, 9, 2, 7, 1, 5],\n//   [1, 7, 4, 9, 8, 3, 5, 6, 2],\n//   [8, 5, 9, 7, 2, 6, 4, 3, 1],\n//   [6, 2, 3, 5, 1, 4, 9, 7, 8],\n// ];\n\n// const TEST2 = [\n//   [1, 7, 4, 9, 8, 3, 5, 6, 2],\n//   [8, 5, 9, 7, 2, 6, 4, 3, 1],\n//   [6, 2, 3, 5, 1, 4, 9, 7, 8],\n//   [0, 1, 2, 4, 6, 9, 8, 5, 3],\n//   [9, 8, 6, 1, 3, 5, 2, 4, 7],\n//   [3, 4, 5, 2, 7, 8, 1, 9, 6],\n//   [0, 9, 1, 3, 5, 7, 6, 8, 4],\n//   [5, 6, 7, 8, 4, 1, 3, 2, 9],\n//   [4, 0, 8, 6, 9, 2, 7, 1, 5],\n// ];\n","import _ from \"lodash\";\n\nexport let isIncorrect = (board, coord) => {\n  let [x, y] = coord;\n  if (x === -1 && y === -1) return;\n\n  let num = board[x][y];\n  let rowNums = getRowNums(board, x);\n  if (hasDuplicate(rowNums, num)) {\n    return true;\n  }\n  let colNums = getColNums(board, y);\n  if (hasDuplicate(colNums, num)) {\n    return true;\n  }\n  let boxNums = getBoxNums(board, x, y);\n  if (hasDuplicate(boxNums, num)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport let isGameFinished = (board) => {\n  let sz = 9;\n  let msz = 3;\n\n  for (let row = 0; row < sz; ++row) {\n    let nums = getRowNums(board, row);\n    if (_.uniq(nums).length !== sz) {\n      return false;\n    }\n  }\n  for (let col = 0; col < sz; ++col) {\n    let nums = getColNums(board, col);\n    if (_.uniq(nums).length !== sz) {\n      return false;\n    }\n  }\n  for (let i = 0; i < msz; ++i) {\n    for (let j = 0; j < msz; ++j) {\n      let nums = getBoxNums(board, i * msz, j * msz);\n      if (_.uniq(nums).length !== sz) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nlet getRowNums = (board, x) => {\n  return _.filter(_.cloneDeep(board[x]), (num) => num > 0);\n};\n\nlet getColNums = (board, y) => {\n  let colNums = _.map(_.range(board.length), (i) => board[i][y]);\n  return _.filter(colNums, (num) => num > 0);\n};\n\nlet getBoxNums = (board, x, y) => {\n  const sz = 3;\n  let nums = [];\n  let cornerIdx = _.map(_.range(3), (i) => i * 3);\n  while (x >= 0 && !cornerIdx.includes(x)) {\n    x--;\n  }\n  while (y >= 0 && !cornerIdx.includes(y)) {\n    y--;\n  }\n  for (let k = x; k < x + sz; ++k) {\n    for (let l = y; l < y + sz; ++l) {\n      nums.push(board[k][l]);\n    }\n  }\n  return nums;\n};\n\nlet hasDuplicate = (array, num) => {\n  let eq = (n) => n === num;\n  return _.findIndex(array, eq) !== _.findLastIndex(array, eq);\n};\n","import React, { Component } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport _ from \"lodash\";\nimport \"./App.css\";\nimport TopGrid from \"./components/TopGrid\";\nimport Numbers from \"./components/Numbers\";\nimport Info from \"./components/Info\";\nimport Generator from \"./components/Generator\";\nimport { isIncorrect, isGameFinished } from \"./components/Utils\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [[]],\n      stack: [],\n      hintStack: [],\n      hintMode: false,\n      showInfo: false,\n    };\n    this.generator = new Generator();\n    this.removeNumber = this.removeNumber.bind(this);\n    this.onNewNumberDrop = this.onNewNumberDrop.bind(this);\n    this.getLastCoords = this.getLastCoords.bind(this);\n    this.isLastIncorrect = this.isLastIncorrect.bind(this);\n    this.isGameFinished = this.isGameFinished.bind(this);\n    this.newPuzzle = this.newPuzzle.bind(this);\n    this.toggleInfo = this.toggleInfo.bind(this);\n    this.toggleHintMode = this.toggleHintMode.bind(this);\n    this.reset = this.reset.bind(this);\n\n    this.gameAreaRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.newPuzzle();\n  }\n\n  render() {\n    const finished = this.isGameFinished();\n    return (\n      <React.Fragment>\n        <div className=\"app\">\n          <h1>sūdoku</h1>\n          {!finished ? this.renderTopControls() : \"\"}\n          <div className=\"grid-row\">\n            {!finished ? this.renderSideControls() : \"\"}\n            <TopGrid\n              board={this.state.board}\n              added={this.state.stack}\n              hintMode={this.state.hintMode}\n              hintStack={this.state.hintStack}\n              removeNumber={this.removeNumber}\n              onNewNumberDrop={this.onNewNumberDrop}\n              lastCoords={this.getLastCoords()}\n              isLastIncorrect={this.isLastIncorrect()}\n              isGameFinished={finished}\n            />\n            {!finished ? this.renderSideControls() : \"\"}\n          </div>\n          {!finished ? this.renderTopControls() : \"\"}\n          {!finished ? this.renderBottomControls() : this.renderWellDone()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderTopControls() {\n    return (\n      <div className=\"top-controls\">\n        <Numbers vertical={false} hintMode={this.state.hintMode} />\n      </div>\n    );\n  }\n\n  renderSideControls() {\n    return (\n      <div className=\"side-controls\">\n        <Numbers vertical={true} hintMode={this.state.hintMode} />\n      </div>\n    );\n  }\n\n  renderBottomControls() {\n    return (\n      <div className=\"bottom-controls\">\n        <div className=\"control-buttons\">\n          <Form.Check\n            type=\"switch\"\n            id=\"custom-switch\"\n            label=\"Hint mode\"\n            checked={this.state.hintMode}\n            onChange={(ev) => this.toggleHintMode(ev)}\n          />\n          {this.state.stack.length > 0 ? (\n            <Button variant=\"outline-danger\" size=\"sm\" onClick={this.reset}>\n              Reset\n            </Button>\n          ) : (\n            \"\"\n          )}\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={this.toggleInfo}>\n            Info\n          </Button>\n          <div ref={this.gameAreaRef}>\n            <Info onInfoHide={this.toggleInfo} show={this.state.showInfo} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  toggleHintMode(event) {\n    // console.log(\"toggle hint mode\", event.target.checked);\n    this.setState({\n      hintMode: event.target.checked,\n    });\n  }\n\n  toggleInfo() {\n    const now = this.state.showInfo;\n    this.setState({\n      showInfo: !now,\n    });\n  }\n\n  renderWellDone() {\n    return (\n      <div className=\"welldone\">\n        <h3>Well Done!</h3>\n        <Button variant=\"success\" size=\"sm\" onClick={this.newPuzzle}>\n          New Puzzle\n        </Button>\n      </div>\n    );\n  }\n\n  removeNumber(row, col) {\n    // console.log(\"removing: \", row, col);\n    let i = _.findIndex(this.state.stack, ([x, y]) => {\n      return x === row && y === col;\n    });\n    if (i === -1) return;\n\n    let [x, y] = this.state.stack[i];\n    let newBoard = _.cloneDeep(this.state.board);\n    newBoard[x][y] = 0;\n    let newStack = _.concat(\n      _.slice(this.state.stack, 0, i),\n      _.slice(this.state.stack, i + 1)\n    );\n\n    let hintI = _.findIndex(this.state.hintStack, ([x, y]) => {\n      return x === row && y === col;\n    });\n    if (hintI !== -1) {\n      let newHintStack = _.concat(\n        _.slice(this.state.hintStack, 0, i),\n        _.slice(this.state.hintStack, i + 1)\n      );\n      this.setState({\n        board: newBoard,\n        stack: newStack,\n        hintStack: newHintStack,\n      });\n    } else {\n      this.setState({\n        board: newBoard,\n        stack: newStack,\n      });\n    }\n  }\n\n  onNewNumberDrop(row, col, num) {\n    // console.log(\"drop: \", num, \"at: \", row, col);\n    let newBoard = _.cloneDeep(this.state.board);\n    newBoard[row][col] = num;\n\n    if (this.state.hintMode) {\n      this.setState({\n        board: newBoard,\n        hintStack: _.concat(this.state.hintStack, [[row, col]]),\n        stack: _.concat(this.state.stack, [[row, col]]),\n      });\n    } else {\n      this.setState({\n        board: newBoard,\n        stack: _.concat(this.state.stack, [[row, col]]),\n      });\n    }\n  }\n\n  newPuzzle() {\n    this.setState({\n      board: this.generator.generate(),\n      stack: [],\n      hintMode: false,\n      hintStack: [],\n    });\n  }\n\n  reset() {\n    let resetBoard = _.cloneDeep(this.state.board);\n    for (let [i, j] of this.state.stack) {\n      resetBoard[i][j] = 0;\n    }\n    this.setState({\n      board: resetBoard,\n      stack: [],\n      hintMode: false,\n      hintStack: [],\n    });\n  }\n\n  getLastCoords() {\n    if (this.state.stack.length === 0) {\n      return [-1, -1];\n    }\n    return _.last(this.state.stack);\n  }\n\n  isLastIncorrect() {\n    return isIncorrect(this.state.board, this.getLastCoords());\n  }\n\n  isGameFinished() {\n    return isGameFinished(this.state.board);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}